openapi: 3.0.0
info:
  title: Clover API
  version: "0.1.0"
  description: API for managing resources on Ubicloud

servers:
  - url: 'https://api.ubicloud.com'
  
security:
  - BearerAuth: []

paths:

  # LOGIN
  /login:
    post:
      tags:
        - Login
      summary: Login with user information
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: "user@mail.com"
                password:
                  type: string
                  example: "password"
              required:
                - login
                - password
      responses:
        '200':
          description: Logged in successfully.
          headers:
            Authorization:
              description: JWT Token
              schema:
                type: string
        '401':
          description: Unauthorized
          

  # PROJECT
  /project:
    get:
      tags: 
        - Project
      summary: List all projects visible to the logged in user.
      operationId: listProjects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: Return the list of all projects visible to the logged in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: 
                      $ref: '#/components/schemas/Project'
                  count:
                    type: integer
        '401':
          description: Unauthorized
    post:
      tags: 
        - Project
      summary: Create a new project
      operationId: createProject
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "my-project-name"
              required:
                - name
      responses:
        '200':
          description: Project is created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: InvalidRequest
        '401':
          description: Unauthorized
  /project/{project_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      tags: 
        - Project
      summary: Retrieve a project
      operationId: getProject
      responses:
        '200':
          description: Retrieved project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    delete:
      tags: 
        - Project
      summary: Delete a project
      operationId: deleteProject
      responses:
        '204':
          description: Project deleted successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
  
  # VM
  /project/{project_id}/vm:
    get:
      tags: 
        - Virtual Machine
      summary: List all VMs created under the given project ID and visible to logged in user
      operationId: listProjectVMs
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: Return the list of all VMs visible created under the given project and visible to the logged in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vm'
                  count:
                    type: integer
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/vm:
    get:
      tags: 
        - Virtual Machine
      summary: List VMs in a specific location of a project
      operationId: listLocationVMs
      parameters:
        - $ref: '#/components/parameters/project_id'
        - in: path
          name: location
          required: true
          schema:
            type: string
          description: Return the list VMs created in a specific location of a project and visible to the logged in user
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of VMs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vm'
                  count:
                    type: integer
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/vm/{vm_name}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/vm_name'
    post:
      tags: 
        - Virtual Machine
      summary: Create a new VM in a specific location of a project
      operationId: createVM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  type: string
                  description: Public SSH key for the VM
                size:
                  type: string
                  description: Size of the VM
                unix_user:
                  type: string
                  description: Unix user of the VM
                boot_image:
                  type: string
                  description: Boot image of the VM
                enable_ip4:
                  type: boolean
                  description: Enable IPv4
                private_subnet_id:
                  type: string
                  description: ID of the private subnet
                storage_size:
                  type: integer
                  description: Requested storage size in GiB
              required:
                - public_key
      responses:
        '200':
          description: Virtual machine created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDetailed'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
    get:
      tags: 
        - Virtual Machine
      summary: Get details of a specific VM in a location
      operationId: getVMDetails
      responses:
        '200':
          description: Details of the VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDetailed'
        '401':
          description: Unauthorized
    delete:
      tags: 
        - Virtual Machine
      summary: Delete a specific VM
      operationId: deleteVM
      responses:
        '204':
          description: VM deleted successfully
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/vm/id/{vm_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/vm_id'
    get:
      tags: 
        - Virtual Machine
      summary: Get details of a specific VM in a location with ID
      operationId: getVMDetailsWithId
      responses:
        '200':
          description: Details of the VM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmDetailed'
        '401':
          description: Unauthorized
    delete:
      tags: 
        - Virtual Machine
      summary: Delete a specific VM with ID
      operationId: deleteVMWithId
      responses:
        '204':
          description: VM deleted successfully
        '401':
          description: Unauthorized

  # PRIVATE SUBNET
  /project/{project_id}/private-subnet:
    get:
      tags: 
        - Private Subnet
      summary: List visible Private Subnets
      operationId: listPSs
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of private subnets
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PrivateSubnet'
                  count:
                    type: integer
        '401':
          description: Unauthorized
        '404':
          description: Resource is not found
  /project/{project_id}/location/{location}/private-subnet:
    get:
      tags: 
        - Private Subnet
      summary: List Private Subnets in a specific location of a project
      operationId: listLocationPrivateSubnets
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of Private Subnets in a location
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PrivateSubnet'
                  count:
                    type: integer
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
  /project/{project_id}/location/{location}/private-subnet/{private_subnet_name}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/private_subnet_name'
    post:
      tags: 
        - Private Subnet
      summary: Create a new Private Subnet in a specific location of a project
      operationId: createPrivateSubnet
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                firewall_id:
                  type: string
      responses:
        '200':
          description: Private subnet is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateSubnet'
        '401':
          description: Unauthorized
    get:
      tags: 
        - Private Subnet
      summary: Get details of a specific Private Subnet in a location
      operationId: getPrivateSubnetDetails
      responses:
        '200':
          description: Details of the private subnet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateSubnet'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    delete:
      tags: 
        - Private Subnet
      summary: Delete a specific Private Subnet
      operationId: deletePrivateSubnet
      responses:
        '204':
          description: Private Subnet is deleted successfully
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/private-subnet/id/{private_subnet_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/private_subnet_id'
    get:
      tags: 
        - Private Subnet
      summary: Get details of a specific Private Subnet in a location with ID
      operationId: getPSDetailsWithId
      responses:
        '200':
          description: Details of the private subnet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateSubnet'
        '401':
          description: Unauthorized
    delete:
      tags: 
        - Private Subnet
      summary: Delete a specific Private Subnet with ID
      operationId: deletePSWithId
      responses:
        '204':
          description: Private Subnet is deleted successfully
        '401':
          description: Unauthorized

  # POSTGRES
  /project/{project_id}/postgres:
    get:
      tags: 
        - Postgres
      summary: List visible Postgres databases
      operationId: listPostgresDatabases
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of Postgres databases
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Postgres'
                  count:
                    type: integer
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/postgres:
    get:
      tags: 
        - Postgres
      summary: List Postgres databases in a specific location of a project
      operationId: listLocationPostgresDatabases
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/order_column'
      responses:
        '200':
          description: A list of Postgres databases in a specific location of a project
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Postgres'
                  count:
                    type: integer
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/postgres/{postgres_database_name}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_name'
    post:
      tags: 
        - Postgres
      summary: Create a new Postgres database in a specific location of a project
      operationId: createPostgresDatabase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                size:
                  type: string
                  description: Requested size for the underlying VM
                ha_type:
                  type: string
                  description: High availability type
                storage_size:
                  type: integer
                  description: Requested storage size in GiB
              required:
                - size
      responses:
        '200':
          description: Postgres database is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized
    get:
      tags: 
        - Postgres
      summary: Get details of a specific Postgres database in a location
      operationId: getPostgresDatabaseDetails
      responses:
        '200':
          description: Details of the Postgres database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized
    delete:
      tags: 
        - Postgres
      summary: Delete a specific Postgres database
      operationId: deletePostgresDatabase
      responses:
        '204':
          description: Postgres database is deleted successfully
        '401':
          description: Unauthorized
  
  /project/{project_id}/location/{location}/postgres/{postgres_database_name}/restore:
    post:
      tags: 
        - Postgres
      parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_name'
      summary: Restore a new Postgres database in a specific location of a project
      operationId: restorePostgresDatabase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                restore_target:
                  type: string
              required:
                - name, restore_target
      responses:
        '200':
          description: Postgres database is restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/postgres/{postgres_database_name}/reset-superuser-password:
    post:
      tags: 
        - Postgres
      parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_name'
      summary: Reset superuser password of the Postgres database
      operationId: resetSuperuserPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: Superuser password is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/postgres/id/{postgres_database_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_id'
    get:
      tags: 
        - Postgres
      summary: Get details of a specific Postgres database in a location with ID
      operationId: getPostgresDetailsWithId
      responses:
        '200':
          description: Details of the Postgres databases in a location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
    delete:
      tags: 
        - Postgres
      summary: Delete a specific Postgres database with ID
      operationId: deletePostgresDatabaseWithID
      responses:
        '204':
          description: Postgres database is deleted successfully
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/postgres/id/{postgres_database_id}/restore:
    post:
      tags: 
        - Postgres
      parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_id'
      summary: Restore a new Postgres database in a specific location of a project with ID
      operationId: restorePostgresDatabaseWithID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                restore_target:
                  type: string
              required:
                - name, restore_target
      responses:
        '200':
          description: Postgres database is restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Postgres'
        '401':
          description: Unauthorized
  /project/{project_id}/location/{location}/postgres/id/{postgres_database_id}/reset-superuser-password:
    post:
      tags: 
        - Postgres
      parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/location'
      - $ref: '#/components/parameters/postgres_database_id'
      summary: Reset super-user password of the Postgres database
      operationId: resetSuperuserPasswordWithID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: Superuser password is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresDetailed'
        '401':
          description: Unauthorized

# FIREWALL RULES
  /project/{project_id}/firewall/{firewall_id}/firewall-rule:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/firewall_id'
    post:
      tags: 
        - Firewall Rule
      summary: Create a new firewall rule
      operationId: createFirewallRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                firewall_id:
                  type: string
                cidr:
                  type: string
                  description: CIDR of the firewall rule
                port_range:
                  type: string
                  description: Port range of the firewall rule
              required:
                - cidr
      responses:
        '200':
          description: Firewall rule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /project/{project_id}/firewall/{firewall_id}/firewall-rule/{firewall_rule_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/firewall_id'
      - $ref: '#/components/parameters/firewall_rule_id'    
    get:
      tags: 
        - Firewall Rule
      summary: Get details of a firewall rule
      operationId: getFirewallRuleDetails
      responses:
        '200':
          description: Details of the firewall rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        '401':
          description: Unauthorized
    delete:
      tags: 
        - Firewall Rule
      summary: Delete a specific firewall rule
      operationId: deleteFirewallRule
      responses:
        '204':
          description: Firewall rule deleted successfully
        '401':
          description: Unauthorized

# FIREWALL
  /project/{project_id}/firewall:
    parameters:
      - $ref: '#/components/parameters/project_id'
    post:
      tags: 
        - Firewall
      summary: Create a new firewall
      operationId: createFirewall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the firewall
                description:
                  type: string
                  description: Description of the firewall
              required:
                - name
      responses:
        '200':
          description: Firewall created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /project/{project_id}/firewall/{firewall_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/firewall_id'  
    get:
      tags: 
        - Firewall
      summary: Get details of a specific firewall
      operationId: getFirewallDetails
      responses:
        '200':
          description: Details of the firewall
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Firewall'
        '401':
          description: Unauthorized
    delete:
      tags: 
        - Firewall
      summary: Delete a specific firewall
      operationId: deleteFirewall
      responses:
        '204':
          description: Firewall deleted successfully
        '401':
          description: Unauthorized
components:
  securitySchemes:
    BearerAuth:    # Arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT   # Optional, just for documentation purposes
  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          example: pjw92xhhqjdy4g72xng1ubkda6
        name:
          type: string
          example: my-project
          description: Name of the project
        credit:
          type: number
          format: float
          example: 25.4
          description: Remaining credit of the project in $
        discount:
          type: integer
          example: 10
          description: Discount of the project as percentage
    Vm:
      type: object
      properties:
        id:
          type: string
          example: vmw12ouhqjdy4g72xng1ubkda6
          description: ID of the VM
        name:
          type: string
          example: "my-vm-name"
          description: Name of the VM
        state:
          type: string
          description: State of the VM
        location:
          type: string
          example: "eu-north-h1"
          description: Location of the VM
        size:
          type: string
          description: Size of the underlying VM
        unix_user:
          type: string
          description: Unix user of the VM
        storage_size_gib:
          type: integer
          description: Storage size in GiB
        ip6:
          type: string
          format: ipv6
          description: IPv6 address
        ip4:
          type: string
          format: ipv4
          description: IPv4 address
    VmDetailed:
      type: object
      properties:
        id:
          type: string
          example: vmw12ouhqjdy4g72xng1ubkda6
          description: ID of the VM
        name:
          type: string
          example: "my-vm-name"
          description: Name of the VM
        state:
          type: string
          description: State of the VM
        location:
          type: string
          example: "eu-north-h1"
          description: Location of the VM
        size:
          type: string
          description: Size of the underlying VM
        unix_user:
          type: string
          description: Unix user of the VM
        storage_size_gib:
          type: integer
          description: Storage size in GiB
        ip6:
          type: string
          format: ipv6
          description: IPv6 address
        ip4:
          type: string
          format: ipv4
          description: IPv4 address
        private_ipv6:
          type: string
          format: ipv6
          description: Private IPv6 address
        private_ipv4:
          type: string
          format: ipv4
          description: Private IPv4 address
        subnet:
          type: string
          description: Subnet of the VM
        firewalls:
          type: array
          description: List of firewalls
          items: 
            $ref: '#/components/schemas/Firewall'
    Firewall:
      type: object
      properties:
        id:
          type: string
          description: ID of the firewall
        name:
          type: string
          description: Name of the firewall
        description:
          type: string
          description: Description of the firewall
        firewall_rules:
          type: array
          description: List of firewall rules
          items: 
            $ref: '#/components/schemas/FirewallRule'
    FirewallRule:
      type: object
      properties:
        id:
          type: string
          description: ID of the firewall rule
        cidr:
          type: string
          description: CIDR of the firewall rule
        port_range:
          type: string
          description: Port range of the firewall rule
    Nic:
      type: object
      properties:
        id:
          type: string
          description: ID of the NIC
        name:
          type: string
          description: Name of the NIC
        private_ipv4:
          type: string
          format: ipv4
          description: Private IPv4 address
        private_ipv6:
          type: string
          format: ipv6
          description: Private IPv6 address
        vm_name:
          type: string
          description: Name of the VM
    PrivateSubnet:
      type: object
      properties:
        id:
          type: string
          description: ID of the subnet
        name:
          type: string
          description: Name of the subnet
        location:
          type: string
          description: Location of the subnet
        net4:
          type: string
          description: IPv4 CIDR of the subnet
        net6:
          type: string
          description: IPv6 CIDR of the subnet
        nics:
          type: array
          description: List of NICs
          items: 
            $ref: '#/components/schemas/Nic'
        firewalls:
          type: array
          items: 
            $ref: '#/components/schemas/Firewall'
    PostgresFirewallRule:
      type: object
      properties:
        id:
          type: string
          description: ID of the Postgres firewall rule
        cidr:
          type: string
          description: CIDR of the Postgres firewall rule
    Postgres:
      type: object
      properties:
        id:
          type: string
          description: ID of the Postgres database
        name:
          type: string
          description: Name of the Postgres database
        state:
          type: string
          description: State of the Postgres database
        location:
          type: string
          description: Location of the Postgres database
        vm_size:
          type: string
          description: Size of the underlying VM
        storage_size_gib:
          type: integer
          description: Storage size in GiB
        ha_type:
          type: string
          description: High availability type
    PostgresDetailed:
      type: object
      properties:
        id:
          type: string
          description: ID of the Postgres database
        name:
          type: string
          description: Name of the Postgres database
        state:
          type: string
          description: State of the Postgres database
        location:
          type: string
          description: Location of the Postgres database
        vm_size:
          type: string
          description: Size of the underlying VM
        storage_size_gib:
          type: integer
          description: Storage size in GiB
        ha_type:
          type: string
          description: High availability type
        connection_string:
          type: string
          description: Connection string to the Postgres database
        primary:
          type: boolean
          description: Is the database primary
        firewall_rules:
          type: array
          description: List of Postgres firewall rules
          items: 
            $ref: '#/components/schemas/PostgresFirewallRule'
        earliest_restore_time:
          type: string
          description: Earliest restore time (if primary)
        latest_restore_time:
          type: string
          description: Latest restore time (if primary)"

  parameters:
    start_after:
      name: start_after
      in: query
      required: false
      schema:
        type: string
      description: Pagination - Start after
    page_size:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
      description: Pagination - Page size
    order_column:
      name: order_column
      in: query
      required: false
      schema:
        type: string
        default: id
      description: Pagination - Order column
    project_id:
      name: project_id
      in: path
      required: true
      schema:
        type: string
      description: ID of the project
    firewall_id:
      name: firewall_id
      in: path
      required: true
      schema:
        type: string
      description: ID of the firewall
    firewall_rule_id:
      name: firewall_rule_id
      in: path
      required: true
      schema:
        type: string
      description: ID of the firewall rule
    location:
      name: location
      in: path
      required: true
      schema:
        type: string
        example: eu-north-h1
      description: The Ubicloud location/region
    vm_name:
      name: vm_name
      in: path
      required: true
      schema:
        type: string
      description: Virtual machine name
    vm_id:
      name: vm_id
      in: path
      required: true
      schema:
        type: string
      description: Virtual machine ID
    private_subnet_name:
      name: private_subnet_name
      in: path
      required: true
      schema:
        type: string
      description: Private subnet name
    private_subnet_id:
      name: private_subnet_id
      in: path
      required: true
      schema:
        type: string
      description: Private subnet ID
    postgres_database_name:
      name: postgres_database_name
      in: path
      required: true
      schema:
        type: string
      description: Postgres database name
    postgres_database_id:
      name: postgres_database_id
      in: path
      required: true
      schema:
        type: string
      description: Postgres database ID
